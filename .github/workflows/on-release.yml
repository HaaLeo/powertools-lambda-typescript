name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install packages
        run: |
          export NODE_ENV=dev
          npm ci
          npm run lerna-ci
      - name: Run lint
        run: npm run lerna-lint
      - name: Run tests
        run: npm run lerna-test
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R
          $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt)
          --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode
          -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then
          cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
  slack:
    name: Publish to slack channel
    needs: 
      - release_npm
      - release_pypi
    runs-on: ubuntu-latest
    steps:
      - name: publish latest release
        env:
          SLACK_URL: ${{ secrets.SLACK_URL }}
        run: |
          curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository }}/releases/latest > release.json
          VERSION=$( jq -r '.name' release.json )
          CONTENT=$( jq -r '.body' release.json )
          jq -n --arg version "$VERSION" --arg content "$CONTENT" '{"release-version": $version, "release-content": $content}' > body.json
          curl --location --request POST $SLACK_URL \
          --header 'Content-Type: application/json' --data @body.json